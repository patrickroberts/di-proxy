{"version":3,"sources":["index.js"],"names":["injector","callbackfn","TypeError","String","proxy","this","call","apply","concat","Array","prototype","slice","arguments","module","exports","require","noCache","length","undefined","has","get","inject","bind","Object","setPrototypeOf","Proxy","target","propertyName","receiver","dependency","defineProperty","configurable","enumerable","value","writable","set","WeakMap"],"mappings":"mNACA,SAASA,EAAUC,GACjB,GAA0B,mBAAfA,EACT,MAAM,IAAIC,UAAaC,OAAOF,GAAxB,sBAGR,IAAMG,EAAQC,KAEd,OAAO,WACL,OAAOJ,EAAWK,KAAXC,MAAAN,GAAgBI,KAAMD,GAAtBI,OAAAC,MAAAC,UAAAC,MAAAL,KAAgCM,cAI3CC,EAAOC,QAAU,SAAyBC,GAA0B,IAAjBC,EAAiBJ,UAAAK,OAAA,QAAAC,IAAAN,UAAA,IAAAA,UAAA,GAClE,GAAuB,mBAAZG,EACT,MAAM,IAAIb,UAAaC,OAAOY,GAAxB,sBAIR,IAAKC,GAAWX,KAAKc,IAAIJ,GAEvB,OAAOV,KAAKe,IAAIL,GAGlB,IAAMM,EAASrB,EAASsB,KACtBC,OAAOC,kBAAmB,IAAIC,MAAMV,GAClCK,IAD2C,SACtCM,EAAQC,EAAcC,GACzB,IAAMC,EAAaH,EAAOC,GAY1B,OAVKX,GAEHO,OAAOO,eAAeF,EAAUD,GAC9BI,cAAc,EACdC,YAAY,EACZC,MAAOJ,EACPK,UAAU,IAIPL,OASb,OAHAxB,KAAK8B,IAAIpB,EAASM,GAGXA,GACPC,KAAK,IAAIc","file":"di-proxy.min.js","sourcesContent":["// expect callback function to take dependency object as first argument\r\nfunction injector (callbackfn) {\r\n  if (typeof callbackfn !== 'function') {\r\n    throw new TypeError(`${String(callbackfn)} is not a function`)\r\n  }\r\n\r\n  const proxy = this\r\n\r\n  return function () {\r\n    return callbackfn.call(this, proxy, ...arguments)\r\n  }\r\n}\r\n\r\nmodule.exports = function createInjector (require, noCache = false) {\r\n  if (typeof require !== 'function') {\r\n    throw new TypeError(`${String(require)} is not a function`)\r\n  }\r\n\r\n  // if require function is weakly referenced and memoization is enabled\r\n  if (!noCache && this.has(require)) {\r\n    // return cached injector\r\n    return this.get(require)\r\n  }\r\n\r\n  const inject = injector.bind(\r\n    Object.setPrototypeOf({}, new Proxy(require, {\r\n      get (target, propertyName, receiver) {\r\n        const dependency = target(propertyName)\r\n\r\n        if (!noCache) {\r\n          // memoize get trap\r\n          Object.defineProperty(receiver, propertyName, {\r\n            configurable: true,\r\n            enumerable: true,\r\n            value: dependency,\r\n            writable: true\r\n          })\r\n        }\r\n\r\n        return dependency\r\n      }\r\n    }))\r\n  )\r\n\r\n  // weakly reference injector with require function as key\r\n  this.set(require, inject)\r\n\r\n  // return wrapped function\r\n  return inject\r\n}.bind(new WeakMap())\r\n"]}