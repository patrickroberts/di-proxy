{"version":3,"sources":["index.js"],"names":["inject","exports","resolver","memoize","arguments","length","undefined","TypeError","String","Object","create","Proxy","get","target","key","receiver","value","defineProperty","configurable","enumerable","wrap","callback","proxy","call","apply","this","concat","Array","prototype","slice"],"mappings":"sNAeA,IAAMA,EAASC,EAAQD,OAAS,SAAiBE,GAA0B,IAAhBC,IAAgBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACzE,GAAwB,mBAAbF,EACT,MAAM,IAAIK,UAAaC,OAAON,GAAxB,sBAGR,OAAOO,OAAOC,OACZ,IAAIC,MAAMT,GACRU,IADkB,SACbC,EAAQC,EAAKC,GAChB,IAAMC,EAAQH,EAAOC,GAMrB,OAJIX,GACFM,OAAOQ,eAAeF,EAAUD,GAAOI,cAAc,EAAMC,YAAY,EAAMH,MAAAA,IAGxEA,OAwBff,EAAQmB,KAAO,SAAelB,EAAUmB,GACtC,GAAwB,mBAAbA,EACT,MAAM,IAAId,UAAaC,OAAOa,GAAxB,sBAGR,IAAMC,EAAQtB,EAAOE,GAErB,OAAO,WACL,OAAOmB,EAASE,KAATC,MAAAH,GAAcI,KAAMH,GAApBI,OAAAC,MAAAC,UAAAC,MAAAN,KAA8BnB","file":"di-proxy.min.js","sourcesContent":["/**\r\n * @external Proxy\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy|Proxy}\r\n */\r\n\r\n/**\r\n * Creates an optionally memoized proxy that invokes the resolver from trapped property accesses.\r\n *\r\n * @function inject\r\n *\r\n * @param {resolver} resolver - A function invoked within the get trap of returned proxy.\r\n * @param {boolean} [memoize=true] - Shadow properties with result from first invocation of resolver.\r\n *\r\n * @return {external:Proxy} proxy - A proxy with a get trap that invokes the resolver.\r\n */\r\nconst inject = exports.inject = function inject (resolver, memoize = true) {\r\n  if (typeof resolver !== 'function') {\r\n    throw new TypeError(`${String(resolver)} is not a function`)\r\n  }\r\n\r\n  return Object.create(\r\n    new Proxy(resolver, {\r\n      get (target, key, receiver) {\r\n        const value = target(key)\r\n\r\n        if (memoize) {\r\n          Object.defineProperty(receiver, key, { configurable: true, enumerable: true, value })\r\n        }\r\n\r\n        return value\r\n      }\r\n    })\r\n  )\r\n}\r\n\r\n/**\r\n * @see {@link #inject|`inject()`}\r\n *\r\n * @callback resolver\r\n *\r\n * @param {string} key - A reference to some sort of dependency or query.\r\n *\r\n * @return {*} result - Synchronously resolved object referenced by key.\r\n */\r\n\r\n/**\r\n * @function wrap\r\n *\r\n * @param {resolver} resolver - A function invoked within the get trap of first argument to callback.\r\n * @param {callback} callback - A function that accepts a proxy as the first argument.\r\n *\r\n * @return {injector} injector - A function that passes arguments after the proxy in callback when invoked.\r\n */\r\nexports.wrap = function wrap (resolver, callback) {\r\n  if (typeof callback !== 'function') {\r\n    throw new TypeError(`${String(callback)} is not a function`)\r\n  }\r\n\r\n  const proxy = inject(resolver)\r\n\r\n  return function injector () {\r\n    return callback.call(this, proxy, ...arguments)\r\n  }\r\n}\r\n\r\n/**\r\n * @see {@link #wrap|`wrap()`}\r\n *\r\n * @callback callback\r\n *\r\n * @param {external:Proxy} proxy - Bound parameter which is the result of `inject(resolver, true)`.\r\n * @param {...*} rest - Arguments passed when invoking injector.\r\n *\r\n * @return {*}\r\n */\r\n\r\n/**\r\n * @see {@link #wrap|`wrap()`}\r\n *\r\n * @callback injector\r\n *\r\n * @param {...*} args - Passed as rest parameter to callback.\r\n *\r\n * @return {*} result - Result of invoking callback.\r\n */\r\n"]}